
This program, called process-run.py, allows you to see how the state of a
process state changes as it runs on a CPU. As described in the chapter, 
processes can be in a few different states:
这个程序名为process-run.py，它允许您查看进程的状态
进程在CPU上运行时状态会发生变化。如本章所述，
进程可以处于几种不同的状态:

  RUNNING - the process is using the CPU right now.进程正在使用CPU
  READY   - the process could be using the CPU right now
            but (alas) some other process is.进程已准备好使用CPU，但是现在有其他进程正在使用CPU。
  WAITING - the process is waiting on I/O
            (e.g., it issued a request to a disk).进程正在等待I/O(例如，它向磁盘发出请求)
  DONE    - the process is finished executing.进程执行完毕

In this homework, we'll see how these process states change as a program
runs, and thus learn a little bit better how these things work.
在本作业中，我们将看到这些流程状态是如何随着程序而变化的运行，从而更好地了解这些东西是如何工作的。

To run the program and get its options, do this:
要运行程序并获取它的选项，请执行以下操作:
prompt> ./process-run.py -h

If this doesn't work, type "python" before the command, like this:
如果这不起作用，在命令前输入"python"，如下所示:
prompt> python process-run.py -h

What you should see is this:
你应该看到的是:
Usage: process-run.py [options]

Options:
  -h, --help            show this help message and exit
  -s SEED, --seed=SEED  the random seed
  -l PROCESS_LIST, --processlist=PROCESS_LIST
                        a comma-separated list of processes to run, in the
                        form X1:Y1,X2:Y2,... where X is the number of
                        instructions that process should run, and Y the
                        chances (from 0 to 100) that an instruction will use
                        the CPU or issue an IO.
                        要运行的进程列表，多个进程之间用逗号分隔，形式是X1:Y1,X2:Y2,...其中X表示进程运行指令的数量，
                        Y表示指令使用CPU的概率(从0到100，100是完全使用CPU不发出IO，0是完全是发出IO不使用CPU)。
  -L IO_LENGTH, --iolength=IO_LENGTH
                        how long an IO takes.IO需要多长时间。
  -S PROCESS_SWITCH_BEHAVIOR, --switch=PROCESS_SWITCH_BEHAVIOR
                        when to switch between processes: SWITCH_ON_IO,SWITCH_ON_END.
                        何时切换进程:当触发IO事件时切换进程，当目前执行进程结束时切换。
  -I IO_DONE_BEHAVIOR, --iodone=IO_DONE_BEHAVIOR
                        type of behavior when IO ends: IO_RUN_LATER,IO_RUN_IMMEDIATE.
                        IO结束时的行为类型:延时切换到IO结束事件进程执行，立即切换IO结束事件进程执行。
  -c                    compute answers for me.为我计算答案
  -p, --printstats      print statistics at end; only useful with -c flag
                        (otherwise stats are not printed).
                        打印统计数据;仅对-c标志有用(否则统计数据不会打印)。

The most important option to understand is the PROCESS_LIST (as specified by
the -l or --processlist flags) which specifies exactly what each running
program (or "process") will do. A process consists of instructions, and each
instruction can just do one of two things:
要理解的最重要的选项是PROCESS_LIST(由-l或——processlist参数设置)，它指定了每个运行的具体程序内容。
一个进程由指令组成，每个指令只能做以下两件事之一:
- use the CPU.使用CPU。
- issue an IO (and wait for it to complete).发出IO请求(并等待它完成)。

When a process uses the CPU (and does no IO at all), it should simply
alternate between RUNNING on the CPU or being READY to run. For example, here
is a simple run that just has one program being run, and that program only
uses the CPU (it does no IO).
当一个进程只使用CPU，但根本不发出IO请求时，它的进程状态应该是在运行状态和就绪状态之间交替切换。
例如，下面这个简单的程序，该程序只使用CPU(它不发出IO请求)。

prompt> ./process-run.py -l 5:100 
Produce a trace of what would happen when you run these processes:
Process 0
  cpu
  cpu
  cpu
  cpu
  cpu

Important behaviors:
  System will switch when the current process is FINISHED or ISSUES AN IO
  After IOs, the process issuing the IO will run LATER (when it is its turn).
重要的行为:
当目前正在执行的进程执行完毕或发出IO请求时，系统将发生上下文切换，发出IO的进程将延时运行(当轮到它时)

prompt> 

Here, the process we specified is "5:100" which means it should consist of 5
instructions, and the chances that each instruction is a CPU instruction are
100%. 
在这里，我们指定的进程列表参数是"5:100"，这意味着该进程由5个指令组成，每条指令都是100%使用CPU，不发出IO请求。

You can see what happens to the process by using the -c flag, which computes the
answers for you:
通过使用-c标志可以看到进程发生了什么，该标志将计算答案:

prompt> ./process-run.py -l 5:100 -c
Time     PID: 0        CPU        IOs
  1     RUN:cpu          1
  2     RUN:cpu          1
  3     RUN:cpu          1
  4     RUN:cpu          1
  5     RUN:cpu          1

This result is not too interesting: the process is simple in the RUN state and
then finishes, using the CPU the whole time and thus keeping the CPU busy the
entire run, and not doing any I/Os.
这个结果不太有趣:进程在RUN状态下然后结束，整个运行的所有时间都在使用CPU，从而使CPU保持忙碌状态，并且没有做任何I/Os。

Let's make it slightly more complex by running two processes:
让我们运行两个进程，让它稍微复杂一点:

prompt> ./process-run.py -l 5:100,5:100
Produce a trace of what would happen when you run these processes:
Process 0
  cpu
  cpu
  cpu
  cpu
  cpu

Process 1
  cpu
  cpu
  cpu
  cpu
  cpu

Important behaviors:
  Scheduler will switch when the current process is FINISHED or ISSUES AN IO
  After IOs, the process issuing the IO will run LATER (when it is its turn).
重要的行为:
当目前正在执行的进程执行完毕或发出IO请求时，调度器将进行上下文切换，发出IO的进程将延时运行(当轮到它时)。

In this case, two different processes run, each again just using the CPU. What
happens when the operating system runs them? Let's find out:
在这种情况下，两个不同的进程运行，每次都只使用CPU，不发生IO。当操作系统运行时会发生什么?让我们来看看:

prompt> ./process-run.py -l 5:100,5:100 -c
Time     PID: 0     PID: 1        CPU        IOs
  1     RUN:cpu      READY          1
  2     RUN:cpu      READY          1
  3     RUN:cpu      READY          1
  4     RUN:cpu      READY          1
  5     RUN:cpu      READY          1
  6        DONE    RUN:cpu          1
  7        DONE    RUN:cpu          1
  8        DONE    RUN:cpu          1
  9        DONE    RUN:cpu          1
 10        DONE    RUN:cpu          1

As you can see above, first the process with "process ID" (or "PID") 0 runs,
while process 1 is READY to run but just waits until 0 is done. When 0 is
finished, it moves to the DONE state, while 1 runs. When 1 finishes, the trace
is done.
如上所示，首先运行“进程ID”(或“PID”)为0的进程，而进程1准备运行，但等待进程0完成。
当进程0完成后，它转换到DONE状态，同时进程1运行。当进程1结束时，跟踪就结束了。

Let's look at one more example before getting to some questions. In this
example, the process just issues I/O requests. We specify here tht I/Os take 5
time units to complete with the flag -L.
在回答一些问题之前，让我们再看一个例子。在下面这个例子，进程只是发出I/O请求，不使用CPU。我们在这里指定I/O占用5个时间片，用-L参数设置。

prompt> ./process-run.py -l 3:0 -L 5
Produce a trace of what would happen when you run these processes:
Process 0
  io-start
  io-start
  io-start

Important behaviors:
  System will switch when the current process is FINISHED or ISSUES AN IO
  After IOs, the process issuing the IO will run LATER (when it is its turn)
重要的行为:
当目前正在执行的进程执行完毕或发出IO请求时，调度器将进行上下文切换，发出IO的进程将延时运行(当轮到它时)。

What do you think the execution trace will look like? Let's find out:
您认为执行跟踪会是什么样子?让我们来看看:

prompt> ./process-run.py -l 3:0 -L 5 -c
Time     PID: 0        CPU        IOs
  1  RUN:io-start          1
  2     WAITING                     1
  3     WAITING                     1
  4     WAITING                     1
  5     WAITING                     1
  6* RUN:io-start          1
  7     WAITING                     1
  8     WAITING                     1
  9     WAITING                     1
 10     WAITING                     1
 11* RUN:io-start          1
 12     WAITING                     1
 13     WAITING                     1
 14     WAITING                     1
 15     WAITING                     1
 16*       DONE

As you can see, the program just issues three I/Os. When each I/O is issued,
the process moves to a WAITING state, and while the device is busy servicing
the I/O, the CPU is idle. 
正如您所看到的，这个程序只发出三个I/O请求。当发出一个I/O请求时，进程状态转变为等待状态，而设备正在忙着响应I/O请求, CPU空闲。

Let's print some stats (run the same command as above, but with the -p flag)
to see some overall behaviors: 
让我们打印一些统计数据(运行与上面相同的命令，但是带有-p标志)查看一些整体行为:

Stats: Total Time 16
Stats: CPU Busy 3 (18.75%)
Stats: IO Busy  12 (75.00%)

As you can see, the trace took 16 clock ticks to run, but the CPU was only
busy less than 20% of the time. The IO device, on the other hand, was quite
busy. In general, we'd like to keep all the devices busy, as that is a better
use of resources.
正如您所看到的，跟踪运行了16个时间片，但是CPU的忙碌时间不超过20%。另一方面，IO设备非常忙了。
总的来说，我们希望所有的设备都处于忙碌状态，因为这样能更好的使用资源。

There are a few other important flags:
  -s SEED, --seed=SEED  the random seed  
    this gives you way to create a bunch of different jobs randomly.
    这为你提供了一种随机创建不同工作的方法。

  -L IO_LENGTH, --iolength=IO_LENGTH
    this determines how long IOs take to complete (default is 5 ticks).
    这决定了IOs完成的时间(默认为5个时间片)。

  -S PROCESS_SWITCH_BEHAVIOR, --switch=PROCESS_SWITCH_BEHAVIOR
                        when to switch between processes: SWITCH_ON_IO, SWITCH_ON_END
    this determines when we switch to another process:
    这决定了我们何时切换到另一个进程:
    - SWITCH_ON_IO, the system will switch when a process issues an IO.当一个进程发出IO请求时,系统将会进行上下切换。
    - SWITCH_ON_END, the system will only switch when the current process is done.系统只在当前进程完成时才会切换。

  -I IO_DONE_BEHAVIOR, --iodone=IO_DONE_BEHAVIOR
                        type of behavior when IO ends: IO_RUN_LATER, IO_RUN_IMMEDIATE
    this determines when a process runs after it issues an IO:
    这决定了IO执行完毕后，什么时候恢复运行发出该IO请求的进程:
    - IO_RUN_IMMEDIATE: switch to this process right now.立刻切换到发出IO请求的进程运行。
    - IO_RUN_LATER: switch to this process when it is natural to.延时切换到发出IO请求的进程运行，这依赖于进程上下文切换行为。
      (e.g., depending on process-switching behavior)

Now go answer the questions at the back of the chapter to learn more.
现在去回答后面的问题，了解更多。




